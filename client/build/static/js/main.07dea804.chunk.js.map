{"version":3,"sources":["Components/Chat/MessageItem/index.tsx","Components/Chat/MessageList/index.tsx","Components/Chat/MessageSend/index.tsx","utils/useConnect.tsx","Components/Chat/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MessageItem","author","message","className","MessageList","list","console","log","JSON","stringify","Object","values","map","item","key","_id","MessageSend","isOpenConnection","send","useState","value","setValue","onChange","e","target","placeholder","onClick","statuses","useConnectWs","host","socket","setSocket","open","close","setAuthor","actions","setActions","status","messages","Array","state","setState","useEffect","connect","oper","socket1","WebSocket","onopen","onmessage","event","data","parse","isArray","arr","obj","forEach","filt","sort","a","b","Date","time","getTime","changeStatus","onclose","onerror","timeout","window","setTimeout","clearTimeout","closeSocket","useCallback","Chat","useConnectWS","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"2SAiBeA,MATf,YAA2D,IAArCC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,QAC5B,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,uBAAuB,UAAGF,EAAH,OAAgB,GACtD,yBAAKE,UAAU,wBAAwBD,GAAW,M,MCkBzCE,MArBf,YAAgD,IAA1BC,EAAyB,EAAzBA,KAIpB,OAHAC,QAAQC,IAAI,OAAQF,GACpBC,QAAQC,IAAIC,KAAKC,UAAUJ,IAGzB,yBAAKF,UAAU,eACZO,OAAOC,OAAON,GAAMO,KAAI,SAACC,GAGxB,OAFAP,QAAQC,IAAI,MAAOM,GAGjB,kBAAC,EAAD,CACEC,IAAKD,EAAKE,IACVd,OAAQY,EAAKZ,OACbC,QAASW,EAAKX,eCOXc,MAtBf,YAAiE,EAA3CC,iBAA4C,IAA1BC,EAAyB,EAAzBA,KAAyB,EACrCC,mBAAS,IAD4B,mBACxDC,EADwD,KACjDC,EADiD,KAG/D,OACE,6BACE,2BACED,MAAOA,EACPE,SAAU,SAACC,GAAD,OAAOF,EAASE,EAAEC,OAAOJ,QACnCK,YAAY,kBAEd,4BACEC,QAAS,WACPR,EAAKE,GACLC,EAAS,MAHb,U,cCRAM,EACU,eADVA,EAEK,gBAFLA,EAGG,mDAHHA,EAIO,aAJPA,EAKG,oDAyIMC,MAnHf,SAAsBC,GAAqC,IAAD,EAC5BV,qBAD4B,mBACjDW,EADiD,KACzCC,EADyC,OAE1BZ,mBAAS,CACrCa,KAAM,aACNd,KAAM,SAAChB,KACP+B,MAAO,aACPC,UAAW,SAACjC,OAN0C,mBAEjDkC,EAFiD,KAExCC,EAFwC,OAQ9BjB,mBAAS,CACjCF,kBAAkB,EAClBhB,OAAQ,GACRoC,OAAQV,EACRW,SAAU,IAAIC,QAZwC,mBAQjDC,EARiD,KAQ1CC,EAR0C,KAexDC,qBAAU,WACRN,EAAW,CACTF,UAAW,SAACjC,GAAD,OAAoBwC,EAAS,2BAAID,GAAL,IAAYvC,aACnD+B,KAAM,WACJS,EAAS,2BAAID,GAAL,IAAYvB,kBAAkB,EAAMhB,OAAQuC,EAAMvC,UAC1D0C,EAAQH,EAAMvC,SAEhBiB,KAAM,SAAChB,GACL4B,EAAOZ,KAAKV,KAAKC,UAAU,CAACmC,KAAM,cAAe1C,cAEnD+B,MAAO,WACLQ,EAAS,2BAAID,GAAL,IAAYvB,kBAAkB,KACtCa,EAAOG,aAGV,CAACO,IAEJ,IAAMG,EAAU,SAAC1C,GACfwC,EAAS,2BAAID,GAAL,IAAYH,OAAQV,EAAoBV,kBAAkB,KAClE,IAAI4B,EAAU,IAAIC,UAAUjB,GAC5BgB,EAAQE,OAAS,kBACfF,EAAQ3B,KAAKV,KAAKC,UAAU,CAACmC,KAAM,WAAYxB,MAAOoB,EAAMvC,WAC9D8B,EAAUc,IAGZH,qBAAU,WACJZ,IACFA,EAAOkB,UAAY,SAACC,GAClB,IAAMC,EAAkB1C,KAAK2C,MAAMF,EAAMC,MAEzC,GAAIX,MAAMa,QAAQF,EAAK9B,OAAQ,CAS7BqB,EAAS,2BACJD,GADG,IAENF,SAVW,SAACe,GACZ,IAAMC,EAAmC,GAIzC,OAFAD,EAAIE,SAAQ,SAAC1C,GAAD,OAAWyC,EAAIzC,EAAKE,KAAOF,KAEhCH,OAAOC,OAAO2C,GAKXE,CAAK,GAAD,mBAAKhB,EAAMF,UAAX,YAAwBY,EAAK9B,SAAQqC,MACjD,SAACC,EAAGC,GAAJ,OAAU,IAAIC,KAAKF,EAAEG,MAAMC,UAAY,IAAIF,KAAKD,EAAEE,MAAMC,qBAI5DrB,EAAS,2BACJD,GADG,IAENF,SAAS,GAAD,mBAAME,EAAMF,UAAZ,CAAsBY,EAAK9B,WAIvCU,EAAOiB,OAAS,WACdgB,EAAapC,GACbG,EAAOZ,KAAKV,KAAKC,UAAU,CAACmC,KAAM,WAAYxB,MAAOoB,EAAMvC,WAE7D6B,EAAOkC,QAAU,kBAAMD,EAAapC,IACpCG,EAAOmC,QAAU,kBAAMF,EAAapC,QAGvC,CAACG,EAAQU,EAAMF,WAElB,IAAMyB,EAAe,SAAC1B,GAAD,OAAoBI,EAAS,2BAAID,GAAL,IAAYH,aAE7DK,qBAAU,WACR,GACEF,EAAMvB,kBACNuB,EAAMH,SAAWV,GACjBa,EAAMH,SAAWV,EACjB,CACA,IAAIuC,EAAkB,EACtB,OAAQvC,GACN,KAAKA,EAKL,KAAKA,EACHuC,EAAUC,OAAOC,YAAW,WAC1BzB,EAAQH,EAAMvC,UACb,KAOP,OAAO,kBAAMoE,aAAaH,OAE3B,CAAC1B,EAAMH,SAEV,IAAMiC,EAAcC,uBAAY,kBAAMzC,EAAOG,QAAO,CAACH,IAMrD,OAJAY,qBAAU,WACR,OAAO,kBAAM4B,OACZ,IAEI,CAAC9B,EAAOL,I,MC/GFqC,MA/Bf,WAAiB,IAAD,EACWC,EAAa,uBADxB,mBACPjC,EADO,KACAL,EADA,KAId,OADA7B,QAAQC,IAAI,IAAKiC,GACZA,EAAMvB,iBAgBT,yBAAKd,UAAU,QACb,kBAAC,EAAD,CAAaE,KAAMmC,EAAMF,WACzB,kBAAC,EAAD,CACErB,iBAAkBuB,EAAMvB,iBACxBC,KAAMiB,EAAQjB,OAEfsB,EAAMH,QApBP,yBAAKlC,UAAU,QACb,2BACEiB,MAAOoB,EAAMvC,OACbwB,YAAY,aACZH,SAAU,SAACC,GAAD,OAAOY,EAAQD,UAAUX,EAAEC,OAAOJ,UAE9C,4BAAQM,QAAS,kBAAOc,EAAMvC,OAASkC,EAAQH,OAAS,OAAxD,aCNO0C,MARf,WACE,OACE,yBAAKvE,UAAU,OACb,kBAAC,EAAD,QCKcwE,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNrF,QAAQqF,MAAMA,EAAMzF,c","file":"static/js/main.07dea804.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\ntype MessageItemProps = {\n  author: string;\n  message: string;\n};\n\nfunction MessageItem({author, message}: MessageItemProps) {\n  return (\n    <div className=\"MessageItem\">\n      <div className=\"MessageItem__author\">{`${author}:` || \"\"}</div>\n      <div className=\"MessageItem__message\">{message || \"\"}</div>\n    </div>\n  );\n}\n\nexport default MessageItem;\n","import React from \"react\";\nimport {MessageItem as MessageItemType} from \"../../../utils/useConnect\";\nimport MessageItem from \"../MessageItem\";\nimport \"./styles.css\";\n\ntype MessageListProps = {\n  list: Record<number, MessageItemType>;\n};\n\nfunction MessageList({list}: MessageListProps) {\n  console.log(\"LIST\", list);\n  console.log(JSON.stringify(list));\n\n  return (\n    <div className=\"MessageList\">\n      {Object.values(list).map((item) => {\n        console.log(\"ttt\", item);\n\n        return (\n          <MessageItem\n            key={item._id}\n            author={item.author}\n            message={item.message}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default MessageList;\n","import React, {useEffect, useState} from \"react\";\n\ntype MessageSendProps = {\n  isOpenConnection: boolean;\n  send: (message: string) => void;\n};\n\nfunction MessageSend({isOpenConnection, send}: MessageSendProps) {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <div>\n      <input\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        placeholder=\"print message\"\n      />\n      <button\n        onClick={() => {\n          send(value);\n          setValue(\"\");\n        }}\n      >\n        Send\n      </button>\n    </div>\n  );\n}\n\nexport default MessageSend;\n","import {useEffect, useState, useCallback} from \"react\";\n\nexport type MessageItem = {\n  _id: string;\n  author: string;\n  message: string;\n  time: Date;\n};\n\nconst statuses = {\n  disconnected: \"Disconnected\",\n  connect: \"Connecting...\",\n  error: \"Connection error! Reconnecting is in progress...\",\n  connected: \"Connected!\",\n  close: \"Connection broken! Reconnecting is in progress...\",\n};\n\ninterface WsConnection {\n  isOpenConnection: boolean;\n  status: string;\n  author: string;\n  messages: MessageItem[];\n}\n\ninterface Actions {\n  open: () => void;\n  send: (message: string) => void;\n  close: () => void;\n  setAuthor: (author: string) => void;\n}\n\ntype Operation = {\n  oper: string;\n  value: any;\n};\n\nfunction useConnectWs(host: any): [WsConnection, Actions] {\n  const [socket, setSocket] = useState<any>();\n  const [actions, setActions] = useState({\n    open: () => {},\n    send: (message: string) => {},\n    close: () => {},\n    setAuthor: (author: string) => {},\n  });\n  const [state, setState] = useState({\n    isOpenConnection: false,\n    author: \"\",\n    status: statuses.disconnected,\n    messages: new Array<MessageItem>(),\n  });\n\n  useEffect(() => {\n    setActions({\n      setAuthor: (author: string) => setState({...state, author}),\n      open: () => {\n        setState({...state, isOpenConnection: true, author: state.author});\n        connect(state.author);\n      },\n      send: (message: string) => {\n        socket.send(JSON.stringify({oper: \"new_message\", message}));\n      },\n      close: () => {\n        setState({...state, isOpenConnection: false});\n        socket.close();\n      },\n    });\n  }, [state]);\n\n  const connect = (author: string) => {\n    setState({...state, status: statuses.connected, isOpenConnection: true});\n    let socket1 = new WebSocket(host);\n    socket1.onopen = () =>\n      socket1.send(JSON.stringify({oper: \"set_name\", value: state.author}));\n    setSocket(socket1);\n  };\n\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = (event: any) => {\n        const data: Operation = JSON.parse(event.data);\n\n        if (Array.isArray(data.value)) {\n          const filt = (arr: MessageItem[]) => {\n            const obj: Record<string, MessageItem> = {};\n\n            arr.forEach((item) => (obj[item._id] = item));\n\n            return Object.values(obj);\n          };\n\n          setState({\n            ...state,\n            messages: filt([...state.messages, ...data.value]).sort(\n              (a, b) => new Date(a.time).getTime() - new Date(b.time).getTime()\n            ),\n          });\n        } else {\n          setState({\n            ...state,\n            messages: [...state.messages, data.value],\n          });\n        }\n\n        socket.onopen = () => {\n          changeStatus(statuses.connected);\n          socket.send(JSON.stringify({oper: \"set_name\", value: state.author}));\n        };\n        socket.onclose = () => changeStatus(statuses.close);\n        socket.onerror = () => changeStatus(statuses.error);\n      };\n    }\n  }, [socket, state.messages]);\n\n  const changeStatus = (status: string) => setState({...state, status});\n\n  useEffect(() => {\n    if (\n      state.isOpenConnection &&\n      state.status !== statuses.connected &&\n      state.status !== statuses.connect\n    ) {\n      let timeout: number = 0;\n      switch (statuses.error) {\n        case statuses.close:\n          timeout = window.setTimeout(() => {\n            connect(state.author);\n          }, 1000);\n          break;\n        case statuses.error:\n          timeout = window.setTimeout(() => {\n            connect(state.author);\n          }, 1000);\n          break;\n\n        default:\n          break;\n      }\n\n      return () => clearTimeout(timeout);\n    }\n  }, [state.status]);\n\n  const closeSocket = useCallback(() => socket.close, [socket]);\n\n  useEffect(() => {\n    return () => closeSocket();\n  }, []);\n\n  return [state, actions];\n}\n\nexport default useConnectWs;\n","import React, {useEffect} from \"react\";\nimport MessageList from \"./MessageList\";\nimport MessageSend from \"./MessageSend\";\nimport useConnectWS from \"../../utils/useConnect\";\nimport \"./styles.css\";\n\nfunction Chat() {\n  const [state, actions] = useConnectWS(\"ws://127.0.0.1:9090\");\n\n  console.log(\"2\", state);\n  if (!state.isOpenConnection) {\n    return (\n      <div className=\"Chat\">\n        <input\n          value={state.author}\n          placeholder=\"Enter Name\"\n          onChange={(e) => actions.setAuthor(e.target.value)}\n        />\n        <button onClick={() => (state.author ? actions.open() : null)}>\n          Connect\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Chat\">\n      <MessageList list={state.messages} />\n      <MessageSend\n        isOpenConnection={state.isOpenConnection}\n        send={actions.send}\n      />\n      {state.status}\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport \"./App.css\";\nimport Chat from \"./Components/Chat\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\"Service-Worker\": \"script\"},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}